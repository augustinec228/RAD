import datetime
import asyncio
import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

bot_token = '5322794757:AAFLfx8galyt9r58Bd61_agvGJgSOhVvVuA'
bot = Bot(token=bot_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
users_id = [1607382900, 5182705375, 548736394, 981379050]   #–ï–≥–æ—Ä, –ú–∞–º–∞, –õ–∏–∑–∞, –ü–∞–ø–∞, 

class Schedule(StatesGroup):
    who = State()

weekdays = {
    0: {'morning': '–ï–≥–æ—Ä', 'evening': '–î–∞–Ω—è/–õ–∏–∑–∞'}, 
    1: {'morning': '–î–∞–Ω—è/–õ–∏–∑–∞', 'evening': '–ú–∞–º–∞/–ü–∞–ø–∞'}, 
    2: {'morning': '–ï–≥–æ—Ä', 'evening': '–ú–∞–º–∞/–ü–∞–ø–∞'}, 
    3: {'morning': '–î–∞–Ω—è/–õ–∏–∑–∞', 'evening': '–î–∞–Ω—è/–õ–∏–∑–∞'}, 
    4: {'morning': '–ï–≥–æ—Ä', 'evening': '–ú–∞–º–∞/–ü–∞–ø–∞'}, 
    5: {'morning': '–î–∞–Ω—è/–õ–∏–∑–∞', 'evening': '–ú–∞–º–∞/–ü–∞–ø–∞'}, 
    6: {'morning': '–ï–≥–æ—Ä', 'evening': '–ú–∞–º–∞/–ü–∞–ø–∞'}
}

@dp.message_handler(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è?", callback_data="who_today"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –≥—É–ª—è—Ç—å —Å–µ–≥–æ–¥–Ω—è —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º.\n–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è?' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.", reply_markup=keyboard)

@dp.message_handler(commands=['ras'])
async def send_full_schedule(message: types.Message):
    schedule_str = ""
    for day in weekdays.keys():
        day_name = get_day_of_week(day)
        schedule_today = weekdays[day]
        schedule_str += f"{day_name}:\n"
        schedule_str += f"–£—Ç—Ä–æ–º - {schedule_today['morning']} \n"
        schedule_str += f"–í–µ—á–µ—Ä–æ–º - {schedule_today['evening']} \n\n"
    await message.answer(md.text(schedule_str))

async def send_scheduled_messages():
    while True:
        now = datetime.datetime.now()
        if now.minute == 0 and now.hour == 10:
            for user_id in users_id:
                schedule_today = weekdays[now.weekday()]
                await bot.send_message(user_id, f"‚ùóÔ∏è–í–†–ï–ú–Ø –ì–£–õ–Ø–¢–¨‚ùóÔ∏è\n\n"
                    f'–£ –Ω–∞—Å —Å–µ–≥–æ–¥–Ω—è {get_day_of_week()}. \n–ì—É–ª—è—Ç—å —É—Ç—Ä–æ–º –∏–¥–µ—Ç {schedule_today["morning"]}.')
        elif now.minute == 0 and now.hour == 21:
            for user_id in users_id:
                schedule_today = weekdays[now.weekday()]
                await bot.send_message(user_id, f"‚ùóÔ∏è–í–†–ï–ú–Ø –ì–£–õ–Ø–¢–¨‚ùóÔ∏è\n\n"
                    f"‚ùóÔ∏è–í–†–ï–ú–Ø –ì–£–õ–Ø–¢–¨‚ùóÔ∏è\n\n"
                    f'–£ –Ω–∞—Å —Å–µ–≥–æ–¥–Ω—è {get_day_of_week()}. \n–ì—É–ª—è—Ç—å –≤–µ—á–µ—Ä–æ–º –∏–¥–µ—Ç {schedule_today["evening"]}.')
        await asyncio.sleep(60)

def get_day_of_week(day = None):
    if day is None:
        day = datetime.datetime.today().weekday()
    days_of_week = {
        0: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–í—Ç–æ—Ä–Ω–∏–∫', 2: '–°—Ä–µ–¥–∞', 3: '–ß–µ—Ç–≤–µ—Ä–≥', 4: '–ü—è—Ç–Ω–∏—Ü–∞', 5: '–°—É–±–±–æ—Ç–∞', 6: '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }
    return days_of_week[day]

@dp.callback_query_handler(text="who_today", state="*")
async def callback_who_today(call: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(call.id)
    schedule_today = weekdays[datetime.datetime.today().weekday()]
    await call.message.answer(
        f"üìÖ C–µ–≥–æ–¥–Ω—è -  {get_day_of_week()}:\n\n"
        f"–£—Ç—Ä–æ–º - {schedule_today['morning']} \n"
        f"–í–µ—á–µ—Ä–æ–º - {schedule_today['evening']} \n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–π –ø—Ä–æ–≥—É–ª–∫–∏, –ø—É–ø—Å–∏–∫!\n"
        f"–°—Ç–æ–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ 10 —É—Ç—Ä–∞ –∏ –Ω–∞ 9 –≤–µ—á–µ—Ä–∞"

    )
    await state.finish()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(send_scheduled_messages()) # –¥–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_scheduled_messages –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞–Ω–∏–π asyncio
    executor.start_polling(dp, skip_updates=True)
